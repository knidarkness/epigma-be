#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();

const app = require('./../app');
const debug = require('debug')('express-sequelize');
const http = require('http');
const fs = require("fs");
const mongoose = require('mongoose');
const models = require('./../models');


/**
 * Get port from environment and store in Express.
 */

const mongodbUri = process.env.db_uri;
mongoose.connect(mongodbUri)
    .then(async () => {
        console.log('Connected to the database on: ' + mongodbUri);
        await models.Illustration.find({})
            .then(data => {
                if (data.length === 0){
                    const newPath = new models.Illustration({
                        paths: [
                        ]
                    });
                    newPath.save();
                }
            })
            .catch(err => {
                console.log(err);
            });
    })
    .catch(err => {
        console.log('Error during connecting to: ' + mongodbUri);
        console.log(err);
        process.exit(-1);
    });

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */


var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, function() {
    console.log('Express server listening on port ' + server.address().port);
});
server.on('error', onError);
server.on('listening', onListening);
//});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}